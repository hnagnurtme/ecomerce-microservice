version: '3.8'

services:
    # Infrastructure Services
    zookeeper:
        image: confluentinc/cp-zookeeper:7.3.2
        environment:
            ZOOKEEPER_CLIENT_PORT: 2181
            ZOOKEEPER_TICK_TIME: 2000
        networks:
            - microservices-network

    kafka:
        image: confluentinc/cp-kafka:7.3.2
        ports:
            - '9092:9092'
        environment:
            KAFKA_BROKER_ID: 1
            KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
            KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
            KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
            KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
            KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
        depends_on:
            - zookeeper
        networks:
            - microservices-network
        healthcheck:
            test: ['CMD', 'kafka-topics', '--bootstrap-server', 'localhost:9092', '--list']
            interval: 10s
            timeout: 10s
            retries: 5
    kafka-ui:
      image: provectuslabs/kafka-ui:latest
      container_name: kafka-ui
      ports:
        - "8080:8080"
      environment:
        - KAFKA_CLUSTERS_0_NAME=local-kafka
        - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=kafka:9092
        - KAFKA_CLUSTERS_0_ZOOKEEPER=zookeeper:2181
      depends_on:
        - kafka
        - zookeeper
      networks:
        - microservices-network


    mongodb:
        image: mongo:7.0
        ports:
            - '27017:27017'
        environment:
            MONGO_INITDB_ROOT_USERNAME: root
            MONGO_INITDB_ROOT_PASSWORD: secret
        volumes:
            - mongodb_data:/data/db
        networks:
            - microservices-network
        healthcheck:
            test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet
            interval: 10s
            timeout: 10s
            retries: 5

    # Application Services
    api-gateway:
        build:
            context: ./api-gateway
            dockerfile: dockerfile
        ports:
            - '3000:3000'
        environment:
            - NODE_ENV=development
            - AUTH_SERVICE_URL=http://auth-service:3001
            - USER_SERVICE_URL=http://user-service:3002
        networks:
            - microservices-network
        volumes:
            - ./api-gateway:/app
            - /app/node_modules
        command: npm run dev

    auth-service:
        build:
            context: ./auth-service
            dockerfile: dockerfile
        ports:
            - '3001:3001'
        environment:
            - NODE_ENV=development
            - KAFKA_BROKERS=kafka:29092
            - DEV_APP_PORT=3001
            - HOST=mongodb
            - DB_PORT=27017
            - DB_NAME=auth-database            
            - DB_USER=root
            - DB_PASS=secret
        depends_on:
            kafka:
                condition: service_healthy
            mongodb:
                condition: service_healthy
        networks:
            - microservices-network
        volumes:
            - ./auth-service:/app
            - /app/node_modules
        command: npm run dev
        restart: on-failure

    user-service:
        build:
            context: ./user-service
            dockerfile: dockerfile
        ports:
            - '3002:3002'
        environment:
            - NODE_ENV=development
            - KAFKA_BROKERS=kafka:29092
            - DEV_APP_PORT=3002
            - HOST=mongodb
            - DB_PORT=27017
            - DB_NAME=user-database             
            - DB_USER=root
            - DB_PASS=secret
        depends_on:
            kafka:
                condition: service_healthy
            mongodb:
                condition: service_healthy
        networks:
            - microservices-network
        volumes:
            - ./user-service:/app
            - /app/node_modules
        command: npm run dev
        restart: on-failure
    catalog-service:
        build:
            context: ./catalog-service
            dockerfile: dockerfile
        ports:
            - '3003:3003'
        environment:
            - NODE_ENV=development
            - KAFKA_BROKERS=kafka:29092
            - DEV_APP_PORT=3003
            - HOST=mongodb
            - DB_PORT=27017
            - DB_NAME=catalog-database             
            - DB_USER=root
            - DB_PASS=secret
        depends_on:
            kafka:
                condition: service_healthy
            mongodb:
                condition: service_healthy
        networks:
            - microservices-network
        volumes:
            - ./catalog-service:/app
            - /app/node_modules
        command: npm run dev
        restart: on-failure

    elasticsearch:
        image: docker.elastic.co/elasticsearch/elasticsearch:8.13.0
        container_name: elasticsearch
        environment:
            - discovery.type=single-node
            - xpack.security.enabled=false
            - ES_JAVA_OPTS=-Xms512m -Xmx512m
        ports:
            - "9200:9200"
        volumes:
            - elastic_data:/usr/share/elasticsearch/data
        networks:
            - microservices-network
        healthcheck:
            test: ["CMD", "curl", "-f", "http://localhost:9200"]
            interval: 10s
            timeout: 10s
            retries: 5

    kibana:
        image: docker.elastic.co/kibana/kibana:8.13.0
        container_name: kibana
        ports:
            - "5601:5601"
        environment:
            - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
        depends_on:
            - elasticsearch
        networks:
            - microservices-network


networks:
    microservices-network:
        driver: bridge

volumes:
    mongodb_data:
    elastic_data:
