name: GitFlow Workflow

on:
  push:
    branches:
      - develop
      - 'release/**'
      - main
  pull_request:
    branches:
      - develop
      - 'release/**'
      - main
  workflow_dispatch:
    inputs:
      release_version:
        description: 'Version for release (e.g., 1.0.0)'
        required: true
        type: string

jobs:
  develop_build:
    if: github.ref == 'refs/heads/develop'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build auth-service
        run: cd auth-service && npm install && npm run build

      - name: Build user-service
        run: cd user-service && npm install && npm run build

      - name: Build api-gateway
        run: cd api-gateway && npm install && npm run build

      - name: Run linting
        run: npm run lint

  test_services:
    needs: develop_build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install root dependencies
        run: npm install

      - name: Run tests in auth-service
        run: |
          cd auth-service
          npm install
          if grep -q '"test":' package.json; then
            npm test
          else
            echo "⚠️ No test script found in auth-service"
          fi

      - name: Run tests in user-service
        run: |
          cd user-service
          npm install
          if grep -q '"test":' package.json; then
            npm test
          else
            echo "⚠️ No test script found in user-service"
          fi

      - name: Run tests in api-gateway
        run: |
          cd api-gateway
          npm install
          if grep -q '"test":' package.json; then
            npm test
          else
            echo "⚠️ No test script found in api-gateway"
          fi

  create_release:
    if: github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    steps:
      - name: Checkout develop
        uses: actions/checkout@v4
        with:
          ref: develop
          fetch-depth: 0

      - name: Configure Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Create release branch
        run: |
          git checkout -b release/${{ github.event.inputs.release_version }}
          git push origin release/${{ github.event.inputs.release_version }}

      - name: Create Pull Request to main
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          branch: release/${{ github.event.inputs.release_version }}
          base: main
          title: 'Release ${{ github.event.inputs.release_version }}'
          body: |
            ## Release ${{ github.event.inputs.release_version }}
            - All changes from develop
            - Ready for production
            ### Checklist
            - [ ] All tests passing
            - [ ] Code reviewed
            - [ ] Ready for deployment

  release_build:
    if: startsWith(github.ref, 'refs/heads/release/')
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build auth-service
        run: cd auth-service && npm install && npm run build

      - name: Build user-service
        run: cd user-service && npm install && npm run build

      - name: Build api-gateway
        run: cd api-gateway && npm install && npm run build

      - name: Run linting
        run: npm run lint

      - name: Run security audit
        run: npm audit --audit-level=moderate

      - name: Run tests
        run: npm test || echo "⚠️ No test script defined"

      - name: Extract version
        id: extract_version
        run: |
          echo "version=${GITHUB_REF#refs/heads/release/}" >> $GITHUB_OUTPUT

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Push Docker image auth-service
        uses: docker/build-push-action@v5
        with:
          context: ./auth-service
          push: true
          tags: |
            ghcr.io/${{ github.repository_owner }}/auth-service:${{ steps.extract_version.outputs.version }}
            ghcr.io/${{ github.repository_owner }}/auth-service:release-candidate

      - name: Push Docker image user-service
        uses: docker/build-push-action@v5
        with:
          context: ./user-service
          push: true
          tags: |
            ghcr.io/${{ github.repository_owner }}/user-service:${{ steps.extract_version.outputs.version }}
            ghcr.io/${{ github.repository_owner }}/user-service:release-candidate

      - name: Push Docker image api-gateway
        uses: docker/build-push-action@v5
        with:
          context: ./api-gateway
          push: true
          tags: |
            ghcr.io/${{ github.repository_owner }}/api-gateway:${{ steps.extract_version.outputs.version }}
            ghcr.io/${{ github.repository_owner }}/api-gateway:release-candidate

  production_deploy:
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      packages: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build services
        run: |
          cd auth-service && npm install && npm run build
          cd ../user-service && npm install && npm run build
          cd ../api-gateway && npm install && npm run build

      - name: Extract version
        id: extract_version
        run: |
          COMMIT_MSG=$(git log -1 --pretty=%B)
          if [[ $COMMIT_MSG =~ Release[[:space:]]+([0-9]+\.[0-9]+\.[0-9]+) ]]; then
            VERSION=${BASH_REMATCH[1]}
          else
            VERSION=$(date +%Y.%m.%d-%H%M%S)
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Docker login
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Push Docker image auth-service
        uses: docker/build-push-action@v5
        with:
          context: ./auth-service
          push: true
          tags: |
            ghcr.io/${{ github.repository_owner }}/auth-service:${{ steps.extract_version.outputs.version }}
            ghcr.io/${{ github.repository_owner }}/auth-service:latest
            ghcr.io/${{ github.repository_owner }}/auth-service:stable

      - name: Push Docker image user-service
        uses: docker/build-push-action@v5
        with:
          context: ./user-service
          push: true
          tags: |
            ghcr.io/${{ github.repository_owner }}/user-service:${{ steps.extract_version.outputs.version }}
            ghcr.io/${{ github.repository_owner }}/user-service:latest
            ghcr.io/${{ github.repository_owner }}/user-service:stable

      - name: Push Docker image api-gateway
        uses: docker/build-push-action@v5
        with:
          context: ./api-gateway
          push: true
          tags: |
            ghcr.io/${{ github.repository_owner }}/api-gateway:${{ steps.extract_version.outputs.version }}
            ghcr.io/${{ github.repository_owner }}/api-gateway:latest
            ghcr.io/${{ github.repository_owner }}/api-gateway:stable

      - name: Create tag
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git tag -a v${{ steps.extract_version.outputs.version }} -m "Release v${{ steps.extract_version.outputs.version }}"
          git push origin v${{ steps.extract_version.outputs.version }}

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ steps.extract_version.outputs.version }}
          name: Release v${{ steps.extract_version.outputs.version }}
          body: |
            ### Production Release
            - Deployed version: ${{ steps.extract_version.outputs.version }}

      - name: Merge back to develop
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git fetch origin develop
          git checkout develop
          git merge main --no-ff -m "chore: merge main back to develop"
          git push origin develop
